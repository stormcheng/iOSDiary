1> 事件处理简介
*  PPT简介
    * 3大事件：主要了解触摸事件。
    * 什么是响应者对象
    * 为什么继承UIResponder就能处理事件
    * 想处理触摸事件，应该怎么办

2>  01-view拖拽演练
    * 为什么要自定义view：系统自带不能处理事件
    * 演示触摸事件方法,触摸的完整过程。
    * 介绍参数(NSSet,UITouch,UIEvent)
    * 重点UITouch，
    1.触摸事件方法中的UITouch都是同一个对象，因为一根手指对应一个UITouch.当手指移动或者抬起，并不会产生一个新的UITouch对象给你，而是改变UITouch里面的属性，
    1.默认三个方法里面只能获取到一个手指，为什么。UIView不支持多点触控
    2.怎么才能有两个手指，两个手指同时按，并且视图支持多点触控
    3.UITouch的tapCount有什么用？可以判断用户当前是双击还是单击
    4.UITouch的phase有什么用? 根据这个属性，判断当前需要调用哪个处理事件方法，begin,move,end
    程序思路：
    * 在TouchMove里面做事情-为什么?因为用户手指在视图上移动的时候才需要移动视图。
    * 获取用户当前的位置，获取用户之前的位置，就知道用户从哪移动到哪,这个位置也是视图移动的位置
    * 当前视图的位置 = 上一次视图的位置 + 手指的偏移量



3> 02-事件传递
*   PPT简介(学事件传递，谁有权利处理事件)
    * 事件，加入到一个由谁管理的事件队列中?UIApplication
    * 为什么用队列，不用栈。队列先进先出，意味着先产生的事件，先处理。
*   代码验证事件谁处理
    * PPT上这么多view，验证哪个view处理事件。这么多view，都需要监重写一个方法，搞个父类。
    * 一个view能处理事件，意味着事件传递给他了，那怎么传递? 事件是由父控件传递给子控件。
    * 父控件不处理事件，子控件也不能。蓝色不接收事件，黄色也不会接收事件? 为什么，因为事件是从父控件传递给子控件的。父控件都没有事件，怎么传给子控件。
*   代码验证view不能处理事件
    * 一个view怎么不能处理事件。userInteractionEnabled = NO，hidden = YES，alpha <= 0.01
*   代码验证UIImageView不允许交互
    * UIImageView默认不允许用户交互，因此默认它上面的子控件不能接收事件。
*   怎么找到最合适的View？通过一个递归。
    * 第一个接收事件的控件是谁?窗口
    * 当事件传递给窗口的时候，就会让窗口去找最合适的view,1> 判断自己能不能接收事件 2> 点在不在窗口上 3> 去找比自己更合适的view，从后往前遍历子控件，拿到子控件后，把事件传递给这个子控件 4> 子控件拿到事件之后，又会做同样的判断，一直递归去找，直到找到最合适的view.
*   事件传递的目的何在?找到最合适的view,把事件交给他。


4> 03-hitText方法和pointInside方法(复制:02-事件传递代码)
    * （了解hitText）学习一个方法必须了解：什么时候调用和这个方法有什么用
    1. hitText什么时候调用:当一个事件传递给一个控件的时候，控件就会调用这个方法
    2. hitText作用: 寻找到最合适的view。
    * （回顾下事件传递），UIApplication -> UIWindow
    *  UIWindow去寻找最合适的view? [UIWindow hitTest:withEvent:]里面做了什么事情？
    1> 判断窗口能不能处理事件? 如果不能，意味着窗口不是最合适的view，而且也不会去寻找比自己更合适的view,直接返回nil,通知UIApplication，没有最合适的view。
    2> 判断点在不在窗口
    3> 遍历自己的子控件，寻找有没有比自己更合适的view
    4> 如果子控件不接收事件，意味着子控件没有找到最合适的view,然后返回nil,告诉窗口没有找到更合适的view,窗口就知道没有比自己更合适的view,就自己处理事件。
    * 验证下hitTest方法返回nil，里面的子控件能处理事件吗？ 重写根控制器view的hitTest:withEvent:方法，
    * 验证这个方法是否真能找到最合适的view？
    * 如果点击屏幕任何一个地方，都是白色的view，怎么做。直接返回白色的view,就不会继续去找白色view的子控件了。
    * 介绍pointInside方法
    * pointInside作用：判断一个点在不在一个控件上
    * point参数:方法调用者坐标系上的点，PPT画图分析原理。
    * 这节课的重点：学习完了pointInside,就能实现下hitTest方法底层是怎么做的了。


5> 04-hitText练习
    * 分析思路：如果一个点，同时在黄色view和按钮上，由按钮处理事件，怎么做?
    * 分析事件传递: 当黄色要处理事件，首先事件得传递到他身上
    * 重写hitTest方法：事件传递到某个控件，调用什么方法?hitTest
    * 返回nil什么意思？如果直接返回nil，意味着黄色的view，没有找到最合适的view,他的父控件，就会遍历下一个控件，也就是按钮，询问按钮是不是最合适的view.
    * 判断点在不在按钮上，在就交给他处理。
    * pointInside实现。


5> 响应者链条(复制:02-事件传递代码)
    * PPT简介(学了响应者链条，目的知道谁最终处理事件。)
    * touch默认做法:自己不处理事件，交给上一个响应者处理touch事件。
    * 响应者链条，点击绿色的view,如果不处理事件，就会往上传递。
    * 验证touch的默认做法 先恢复所有view的默认做法
    * 监听黄色点击，蓝色点击。
    * 黄色调用默认做法，事件传递给谁处理?蓝色
    * 得出结论：1> touch的默认做法：自己不处理，交给上一个响应者。 2> 上一个响应者默认是父控件
    * 两个view怎么同时处理事件?一个view处理方法，在调用父类默认的做法
    * 把事件传递给白色的view，怎么做?
    * 总结下事件传递的完整过程.
    * 把事件传递给控制器，测试白色view的上一个响应者是否是控制器。
    * 回顾响应者链条

6> 抽屉效果
    添加子视图
*   简单的滑动效果
    * 监听控制器处理事件方法
    * 获取x轴偏移量
    * 改变主视图的frame
*   利用KVO做视图切换
    往左移动，显示右边，隐藏左边
    往右移动，显示左边，隐藏右边
*  复杂的滑动效果，PPT讲解（根据手指每移动一点，x轴的偏移量算出当前视图的frame）
    假设x移到320时，y移动到60，算出没移动一点x，移动多少y
    offsetY = offsetX * 60 / 320  手指每移动一点，x轴偏移量多少，y偏移多少
    为了好看，x移动到320，距离上下的高度需要保持一致，而且有一定的比例去缩放他的尺寸。
    怎么根据之前的frame，算出当前的frame,touchMove只能拿到之前的frame.
    当前的高度 = 之前的高度 * 这个比例
    缩放比例：当前的高度/之前的高度  (screenH - 2 * offsetY) / screenH
    当前的宽度也一样求。
    y值，计算比较特殊，不能直接用之前的y,加上offsetY,往左滑动，主视图应该往下走，但是offsetX是负数，导致主视图会往上走。
    y = （screenH - 当前的高度）* 0.5
    getCurrentFrameWithOffsetX
*   定位(滑动松开手指的时候，移动到目标点)
    移动到左右目标点，根据偏移量 = 当前目标点的x - 之前视图的x，计算移动到目标点的frame
    还原：当没有移动到目标点，就把主视图还原。
*   复位（当主视图不在原始的位置，点击屏幕，恢复原来位置）
    判断手指是否移动，移动的时候就自动定位，不需要手动复位。

7> 手势识别
    使用UIImageView原因：之前既能看见图片，又能监听点击的只有UIButton,学了手势，我们的UIImageView也可以。
    * tap(代理：左边不能点，右边能点)
    * longPress(allowableMovement:触发之前，最大的移动范围)
        > 默认调用两次，开始一次，结束一次。
    * swipe:(一个手势只能识别一个方向)
    * 旋转：
      基于上一次旋转
    注意:通过transform形变，需要去掉autolayout,才准确
    * 复位：(手势的取值都是相对最原始的位置，我们应该是需要相对上一次，因此每次调用，就复位一下，每次都是从零开始旋转角度)
      缩放：复位
    * 如何同时支持旋转和缩放？默认不支持多个手指，
      Simultaneously：同时
      当使用一个手势的时候会调用代理的Simultaneously方法，询问是否支持多个手势
    * pan
      获取平移的位置：translationInView
      复位：setTranslation:inView: 需要传一个view，因为点的位置跟坐标系有关系，看他是基于哪个坐标系被清空的。





